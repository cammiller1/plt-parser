### Starting build.
# Target: compyled.ml.depends, tags: { package(llvm), package(llvm.analysis), warn(+a-4), extension:ml, file:compyled.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package llvm -package llvm.analysis -modules compyled.ml > compyled.ml.depends
# Target: codegen.ml.depends, tags: { package(llvm), package(llvm.analysis), warn(+a-4), extension:ml, file:codegen.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package llvm -package llvm.analysis -modules codegen.ml > codegen.ml.depends
# Target: ast.ml.depends, tags: { package(llvm), package(llvm.analysis), warn(+a-4), extension:ml, file:ast.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package llvm -package llvm.analysis -modules ast.ml > ast.ml.depends
# Target: sast.ml.depends, tags: { package(llvm), package(llvm.analysis), warn(+a-4), extension:ml, file:sast.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package llvm -package llvm.analysis -modules sast.ml > sast.ml.depends
# Target: ast.cmo, tags: { package(llvm), package(llvm.analysis), warn(+a-4), byte, compile, extension:cmo, extension:ml, file:ast.cmo, file:ast.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -w +a-4 -package llvm -package llvm.analysis -o ast.cmo ast.ml
+ ocamlfind ocamlc -c -w +a-4 -package llvm -package llvm.analysis -o ast.cmo ast.ml
File "ast.ml", line 46, characters 19-208:
Warning 8: this pattern-matching is not exhaustive.
Here is an example of a case that is not matched:
(Seq|Exp|Mod)
File "ast.ml", line 93, characters 20-133:
Warning 8: this pattern-matching is not exhaustive.
Here is an example of a case that is not matched:
Array
File "ast.ml", line 100, characters 28-29:
Warning 27: unused variable e.
# Target: sast.cmo, tags: { package(llvm), package(llvm.analysis), warn(+a-4), byte, compile, extension:cmo, extension:ml, file:sast.cmo, file:sast.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -w +a-4 -package llvm -package llvm.analysis -o sast.cmo sast.ml
+ ocamlfind ocamlc -c -w +a-4 -package llvm -package llvm.analysis -o sast.cmo sast.ml
File "sast.ml", line 74, characters 28-29:
Warning 27: unused variable e.
# Target: parser.mly, tags: { package(llvm), package(llvm.analysis), warn(+a-4), extension:mly, file:parser.mly, infer, ocaml, ocamlyacc, parser, quiet, traverse }
ocamlyacc parser.mly
# Target: parser.mli.depends, tags: { package(llvm), package(llvm.analysis), warn(+a-4), extension:mli, file:parser.mli, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package llvm -package llvm.analysis -modules parser.mli > parser.mli.depends
# Target: scanner.mll, tags: { package(llvm), package(llvm.analysis), warn(+a-4), extension:mll, file:scanner.mll, lexer, ocaml, ocamllex, quiet, traverse }
ocamllex.opt -q scanner.mll
# Target: scanner.ml.depends, tags: { package(llvm), package(llvm.analysis), warn(+a-4), extension:ml, file:scanner.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package llvm -package llvm.analysis -modules scanner.ml > scanner.ml.depends
# Target: parser.cmi, tags: { package(llvm), package(llvm.analysis), warn(+a-4), byte, compile, extension:mli, file:parser.mli, interf, ocaml, quiet, traverse }
ocamlfind ocamlc -c -w +a-4 -package llvm -package llvm.analysis -o parser.cmi parser.mli
# Target: semant.ml.depends, tags: { package(llvm), package(llvm.analysis), warn(+a-4), extension:ml, file:semant.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package llvm -package llvm.analysis -modules semant.ml > semant.ml.depends
# Target: codegen.cmo, tags: { package(llvm), package(llvm.analysis), warn(+a-4), byte, compile, extension:cmo, extension:ml, file:codegen.cmo, file:codegen.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -w +a-4 -package llvm -package llvm.analysis -o codegen.cmo codegen.ml
+ ocamlfind ocamlc -c -w +a-4 -package llvm -package llvm.analysis -o codegen.cmo codegen.ml
File "codegen.ml", line 35, characters 21-153:
Warning 8: this pattern-matching is not exhaustive.
Here is an example of a case that is not matched:
Array
File "codegen.ml", line 102, characters 104-107:
Warning 40: Int was selected from type Ast.typ.
It is not visible in the current scope, and will not 
be selected if the type becomes unknown.
File "codegen.ml", line 102, characters 104-107:
Warning 42: this use of Int relies on type-directed disambiguation,
it will not compile with OCaml 4.00 or earlier.
File "codegen.ml", line 118, characters 32-307:
Warning 8: this pattern-matching is not exhaustive.
Here is an example of a case that is not matched:
(SId _|SBinop (_, _, _)|SUniop (_, _)|SCall (_, _))
File "codegen.ml", line 132, characters 24-298:
Warning 8: this pattern-matching is not exhaustive.
Here is an example of a case that is not matched:
(Void|Array)
File "codegen.ml", line 164, characters 36-402:
Warning 8: this pattern-matching is not exhaustive.
Here is an example of a case that is not matched:
(SId _|SBinop (_, _, _)|SUniop (_, _)|SCall (_, _))
File "codegen.ml", line 234, characters 10-618:
Warning 8: this pattern-matching is not exhaustive.
Here is an example of a case that is not matched:
(Seq|Exp|Mod)
File "codegen.ml", line 251, characters 12-564:
Warning 8: this pattern-matching is not exhaustive.
Here is an example of a case that is not matched:
(Seq|Exp|Mod)
File "codegen.ml", line 267, characters 8-56:
Warning 8: this pattern-matching is not exhaustive.
Here is an example of a case that is not matched:
(Pp|Mm)
File "codegen.ml", line 290, characters 34-166:
Warning 8: this pattern-matching is not exhaustive.
Here is an example of a case that is not matched:
(SNoexpr|SId _|SBinop (_, _, _)|SUniop (_, _)|SAssign (_, _)|SCall (_, _))
File "codegen.ml", line 297, characters 42-55:
Error: This expression has type Sast.sexpr = Ast.typ * Sast.sx
       but an expression was expected of type Sast.sx
Command exited with code 2.
# Compilation unsuccessful.
