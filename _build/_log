### Starting build.
# Target: jpie.ml.depends, tags: { package(llvm), package(llvm.analysis), warn(+a-4), extension:ml, file:jpie.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package llvm -package llvm.analysis -modules jpie.ml > jpie.ml.depends # cached
# Target: codegen.ml.depends, tags: { package(llvm), package(llvm.analysis), warn(+a-4), extension:ml, file:codegen.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package llvm -package llvm.analysis -modules codegen.ml > codegen.ml.depends # cached
# Target: ast.ml.depends, tags: { package(llvm), package(llvm.analysis), warn(+a-4), extension:ml, file:ast.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package llvm -package llvm.analysis -modules ast.ml > ast.ml.depends # cached
# Target: ast.cmo, tags: { package(llvm), package(llvm.analysis), warn(+a-4), byte, compile, extension:cmo, extension:ml, file:ast.cmo, file:ast.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -w +a-4 -package llvm -package llvm.analysis -o ast.cmo ast.ml # cached
# Target: sast.ml.depends, tags: { package(llvm), package(llvm.analysis), warn(+a-4), extension:ml, file:sast.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package llvm -package llvm.analysis -modules sast.ml > sast.ml.depends # cached
# Target: sast.cmo, tags: { package(llvm), package(llvm.analysis), warn(+a-4), byte, compile, extension:cmo, extension:ml, file:sast.cmo, file:sast.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -w +a-4 -package llvm -package llvm.analysis -o sast.cmo sast.ml # cached
# Target: codegen.cmo, tags: { package(llvm), package(llvm.analysis), warn(+a-4), byte, compile, extension:cmo, extension:ml, file:codegen.cmo, file:codegen.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -w +a-4 -package llvm -package llvm.analysis -o codegen.cmo codegen.ml # cached
# Target: parser.mly, tags: { package(llvm), package(llvm.analysis), warn(+a-4), extension:mly, file:parser.mly, infer, ocaml, ocamlyacc, parser, quiet, traverse }
ocamlyacc parser.mly
+ ocamlyacc parser.mly
2 rules never reduced
22 reduce/reduce conflicts.
# Target: parser.mli.depends, tags: { package(llvm), package(llvm.analysis), warn(+a-4), extension:mli, file:parser.mli, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package llvm -package llvm.analysis -modules parser.mli > parser.mli.depends
# Target: scanner.mll, tags: { package(llvm), package(llvm.analysis), warn(+a-4), extension:mll, file:scanner.mll, lexer, ocaml, ocamllex, quiet, traverse }
ocamllex.opt -q scanner.mll # cached
# Target: scanner.ml.depends, tags: { package(llvm), package(llvm.analysis), warn(+a-4), extension:ml, file:scanner.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package llvm -package llvm.analysis -modules scanner.ml > scanner.ml.depends # cached
# Target: parser.cmi, tags: { package(llvm), package(llvm.analysis), warn(+a-4), byte, compile, extension:mli, file:parser.mli, interf, ocaml, quiet, traverse }
ocamlfind ocamlc -c -w +a-4 -package llvm -package llvm.analysis -o parser.cmi parser.mli
# Target: scanner.cmo, tags: { package(llvm), package(llvm.analysis), warn(+a-4), byte, compile, extension:cmo, extension:ml, file:scanner.cmo, file:scanner.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -w +a-4 -package llvm -package llvm.analysis -o scanner.cmo scanner.ml # cached
# Target: semant.ml.depends, tags: { package(llvm), package(llvm.analysis), warn(+a-4), extension:ml, file:semant.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package llvm -package llvm.analysis -modules semant.ml > semant.ml.depends # cached
# Target: semant.cmo, tags: { package(llvm), package(llvm.analysis), warn(+a-4), byte, compile, extension:cmo, extension:ml, file:semant.cmo, file:semant.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -w +a-4 -package llvm -package llvm.analysis -o semant.cmo semant.ml # cached
# Target: jpie.cmo, tags: { package(llvm), package(llvm.analysis), warn(+a-4), byte, compile, extension:cmo, extension:ml, file:jpie.cmo, file:jpie.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -w +a-4 -package llvm -package llvm.analysis -o jpie.cmo jpie.ml # cached
# Target: ast.cmx, tags: { package(llvm), package(llvm.analysis), warn(+a-4), compile, extension:cmx, extension:ml, file:ast.cmx, file:ast.ml, implem, native, ocaml, quiet, traverse }
ocamlfind ocamlopt -c -w +a-4 -package llvm -package llvm.analysis -o ast.cmx ast.ml # cached
# Target: sast.cmx, tags: { package(llvm), package(llvm.analysis), warn(+a-4), compile, extension:cmx, extension:ml, file:sast.cmx, file:sast.ml, implem, native, ocaml, quiet, traverse }
ocamlfind ocamlopt -c -w +a-4 -package llvm -package llvm.analysis -o sast.cmx sast.ml # cached
# Target: parser.ml.depends, tags: { package(llvm), package(llvm.analysis), warn(+a-4), extension:ml, file:parser.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package llvm -package llvm.analysis -modules parser.ml > parser.ml.depends
# Target: parser.cmx, tags: { package(llvm), package(llvm.analysis), warn(+a-4), compile, extension:cmx, extension:ml, file:parser.cmx, file:parser.ml, implem, native, ocaml, quiet, traverse }
ocamlfind ocamlopt -c -w +a-4 -package llvm -package llvm.analysis -o parser.cmx parser.ml
+ ocamlfind ocamlopt -c -w +a-4 -package llvm -package llvm.analysis -o parser.cmx parser.ml
File "parser.mly", line 1, characters 1-9:
Warning 45: this open statement shadows the constructor None (which is later used)
# Target: codegen.cmx, tags: { package(llvm), package(llvm.analysis), warn(+a-4), compile, extension:cmx, extension:ml, file:codegen.cmx, file:codegen.ml, implem, native, ocaml, quiet, traverse }
ocamlfind ocamlopt -c -w +a-4 -package llvm -package llvm.analysis -o codegen.cmx codegen.ml
+ ocamlfind ocamlopt -c -w +a-4 -package llvm -package llvm.analysis -o codegen.cmx codegen.ml
File "codegen.ml", line 36, characters 21-126:
Warning 8: this pattern-matching is not exhaustive.
Here is an example of a case that is not matched:
String
File "codegen.ml", line 118, characters 44-943:
Warning 8: this pattern-matching is not exhaustive.
Here is an example of a case that is not matched:
(SId _|SBinop (_, _, _)|SUniop (_, _)|SAssign (_, _))
File "codegen.ml", line 155, characters 28-141:
Warning 8: this pattern-matching is not exhaustive.
Here is an example of a case that is not matched:
(SReturn _|SIf (_, _, _)|SFor (_, _, _, _)|SWhile (_, _))
File "codegen.ml", line 107, characters 8-14:
Warning 26: unused variable lookup.
# Target: scanner.cmx, tags: { package(llvm), package(llvm.analysis), warn(+a-4), compile, extension:cmx, extension:ml, file:scanner.cmx, file:scanner.ml, implem, native, ocaml, quiet, traverse }
ocamlfind ocamlopt -c -w +a-4 -package llvm -package llvm.analysis -o scanner.cmx scanner.ml
# Target: semant.cmx, tags: { package(llvm), package(llvm.analysis), warn(+a-4), compile, extension:cmx, extension:ml, file:semant.cmx, file:semant.ml, implem, native, ocaml, quiet, traverse }
ocamlfind ocamlopt -c -w +a-4 -package llvm -package llvm.analysis -o semant.cmx semant.ml
+ ocamlfind ocamlopt -c -w +a-4 -package llvm -package llvm.analysis -o semant.cmx semant.ml
File "semant.ml", line 3, characters 0-8:
Warning 45: this open statement shadows the constructor None (which is later used)
File "semant.ml", line 18, characters 2-6:
Warning 41: None belongs to several types: Ast.typ option
The first one was selected. Please disambiguate if this is wrong.
File "semant.ml", line 96, characters 19-696:
Warning 8: this pattern-matching is not exhaustive.
Here is an example of a case that is not matched:
(Id _|Binop (_, _, _)|Uniop (_, _)|Assign (_, _))
File "semant.ml", line 116, characters 25-622:
Warning 8: this pattern-matching is not exhaustive.
Here is an example of a case that is not matched:
(Return _|If (_, _, _)|For (_, _, _, _)|While (_, _))
File "semant.ml", line 90, characters 8-26:
Warning 26: unused variable type_of_identifier.
File "semant.ml", line 101, characters 8-33:
Warning 26: unused variable call.
# Target: jpie.cmx, tags: { package(llvm), package(llvm.analysis), warn(+a-4), compile, extension:cmx, extension:ml, file:jpie.cmx, file:jpie.ml, implem, native, ocaml, quiet, traverse }
ocamlfind ocamlopt -c -w +a-4 -package llvm -package llvm.analysis -o jpie.cmx jpie.ml
+ ocamlfind ocamlopt -c -w +a-4 -package llvm -package llvm.analysis -o jpie.cmx jpie.ml
File "jpie.ml", line 26, characters 4-328:
Warning 8: this pattern-matching is not exhaustive.
Here is an example of a case that is not matched:
(Ast|Sast|LLVM_IR)
# Target: jpie.native, tags: { package(llvm), package(llvm.analysis), warn(+a-4), dont_link_with, extension:native, file:jpie.native, link, native, ocaml, program, quiet, traverse }
ocamlfind ocamlopt -linkpkg -package llvm -package llvm.analysis ast.cmx sast.cmx codegen.cmx parser.cmx scanner.cmx semant.cmx jpie.cmx -o jpie.native
# Compilation successful.
