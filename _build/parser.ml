type token =
  | INT
  | FLOAT
  | BOOL
  | STRING
  | VOID
  | ARRAY
  | ASSIGN
  | PLUS
  | MINUS
  | TIMES
  | DIVIDE
  | EXP
  | SEMC
  | PP
  | MM
  | LT
  | GT
  | LTE
  | GTE
  | EQ
  | NE
  | AND
  | OR
  | MOD
  | NOT
  | IN
  | IF
  | ELSE
  | ELIF
  | WHILE
  | FOR
  | DEF
  | RETURN
  | LPAREN
  | RPAREN
  | RBRACE
  | LBRACE
  | COMMA
  | ILITERAL of (int)
  | FLITERAL of (float)
  | ID of (string)
  | SLITERAL of (string)
  | BLITERAL of (bool)
  | EOF

open Parsing;;
let _ = parse_error;;
# 1 "parser.mly"
 open Ast 
# 52 "parser.ml"
let yytransl_const = [|
  257 (* INT *);
  258 (* FLOAT *);
  259 (* BOOL *);
  260 (* STRING *);
  261 (* VOID *);
  262 (* ARRAY *);
  263 (* ASSIGN *);
  264 (* PLUS *);
  265 (* MINUS *);
  266 (* TIMES *);
  267 (* DIVIDE *);
  268 (* EXP *);
  269 (* SEMC *);
  270 (* PP *);
  271 (* MM *);
  272 (* LT *);
  273 (* GT *);
  274 (* LTE *);
  275 (* GTE *);
  276 (* EQ *);
  277 (* NE *);
  278 (* AND *);
  279 (* OR *);
  280 (* MOD *);
  281 (* NOT *);
  282 (* IN *);
  283 (* IF *);
  284 (* ELSE *);
  285 (* ELIF *);
  286 (* WHILE *);
  287 (* FOR *);
  288 (* DEF *);
  289 (* RETURN *);
  290 (* LPAREN *);
  291 (* RPAREN *);
  292 (* RBRACE *);
  293 (* LBRACE *);
  294 (* COMMA *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  295 (* ILITERAL *);
  296 (* FLITERAL *);
  297 (* ID *);
  298 (* SLITERAL *);
  299 (* BLITERAL *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\006\000\006\000\008\000\
\008\000\005\000\005\000\005\000\005\000\005\000\007\000\007\000\
\004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
\004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
\004\000\004\000\004\000\004\000\004\000\004\000\009\000\009\000\
\010\000\010\000\000\000"

let yylen = "\002\000\
\002\000\000\000\002\000\002\000\009\000\005\000\003\000\003\000\
\003\000\007\000\011\000\011\000\007\000\000\000\001\000\002\000\
\004\000\001\000\001\000\001\000\001\000\001\000\000\000\001\000\
\001\000\001\000\001\000\001\000\001\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\004\000\003\000\000\000\001\000\
\001\000\003\000\002\000"

let yydefred = "\000\000\
\002\000\000\000\051\000\000\000\018\000\019\000\020\000\021\000\
\022\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\
\025\000\026\000\000\000\028\000\027\000\001\000\003\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\008\000\
\046\000\009\000\000\000\000\000\000\000\000\000\000\000\000\000\
\033\000\034\000\037\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\038\000\000\000\007\000\000\000\000\000\
\000\000\000\000\045\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\
\016\000\000\000\000\000\000\000\013\000\000\000\002\000\000\000\
\000\000\000\000\000\000\017\000\000\000\000\000\005\000\000\000\
\000\000\011\000\012\000"

let yydgoto = "\002\000\
\003\000\004\000\023\000\024\000\025\000\090\000\031\000\091\000\
\061\000\062\000"

let yysindex = "\004\000\
\000\000\000\000\000\000\018\000\000\000\000\000\000\000\000\000\
\000\000\236\254\237\254\238\254\238\255\226\254\226\254\000\000\
\000\000\000\000\010\255\000\000\000\000\000\000\000\000\193\000\
\249\254\226\254\226\254\226\254\008\255\005\001\063\255\194\255\
\021\255\226\254\226\254\226\254\226\254\226\254\226\254\226\254\
\000\000\226\254\226\254\226\254\226\254\226\254\226\254\226\254\
\226\254\226\254\066\255\214\255\054\000\210\000\022\255\000\000\
\000\000\000\000\005\001\005\001\045\255\052\255\035\255\035\255\
\000\000\000\000\000\000\183\255\183\255\183\255\183\255\039\001\
\039\001\022\001\022\001\000\000\226\254\000\000\055\255\056\255\
\226\254\238\255\000\000\226\254\227\000\081\255\081\255\244\000\
\058\255\067\255\071\255\005\001\000\000\074\255\080\255\226\254\
\000\000\082\255\238\255\089\255\000\000\074\000\000\000\090\255\
\095\255\107\255\064\255\000\000\081\255\081\255\000\000\109\255\
\110\255\000\000\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\134\255\000\000\000\000\
\000\000\000\000\117\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\137\255\000\000\000\000\
\000\000\000\000\116\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\037\255\224\254\000\000\119\255\140\255\163\255\
\000\000\000\000\000\000\234\255\094\000\105\000\128\000\139\000\
\158\000\160\000\162\000\000\000\000\000\000\000\000\000\000\000\
\000\000\129\255\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\132\255\043\255\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\240\255\056\000\249\255\245\255\000\000\000\000\000\000\
\000\000\000\000"

let yytablesize = 575
let yytable = "\033\000\
\010\000\029\000\049\000\015\000\001\000\049\000\030\000\032\000\
\017\000\018\000\019\000\020\000\021\000\026\000\027\000\028\000\
\034\000\022\000\052\000\053\000\054\000\005\000\006\000\007\000\
\008\000\009\000\059\000\060\000\063\000\064\000\065\000\066\000\
\067\000\051\000\068\000\069\000\070\000\071\000\072\000\073\000\
\074\000\075\000\076\000\035\000\038\000\039\000\040\000\010\000\
\055\000\030\000\011\000\012\000\013\000\014\000\015\000\082\000\
\058\000\016\000\050\000\017\000\018\000\019\000\020\000\021\000\
\005\000\006\000\007\000\008\000\009\000\085\000\089\000\030\000\
\077\000\088\000\030\000\056\000\092\000\050\000\078\000\083\000\
\050\000\005\000\006\000\007\000\008\000\009\000\107\000\104\000\
\102\000\084\000\010\000\086\000\087\000\011\000\012\000\013\000\
\014\000\015\000\097\000\111\000\016\000\098\000\017\000\018\000\
\019\000\020\000\021\000\010\000\099\000\100\000\011\000\012\000\
\013\000\014\000\015\000\101\000\105\000\016\000\103\000\017\000\
\018\000\019\000\020\000\021\000\029\000\029\000\029\000\029\000\
\029\000\029\000\108\000\109\000\029\000\029\000\029\000\029\000\
\029\000\029\000\029\000\029\000\029\000\094\000\095\000\110\000\
\114\000\115\000\023\000\031\000\031\000\024\000\047\000\029\000\
\031\000\048\000\029\000\031\000\031\000\031\000\031\000\031\000\
\031\000\031\000\031\000\014\000\112\000\113\000\015\000\000\000\
\000\000\000\000\032\000\032\000\000\000\000\000\031\000\032\000\
\000\000\031\000\032\000\032\000\032\000\032\000\032\000\032\000\
\032\000\032\000\000\000\000\000\000\000\000\000\036\000\037\000\
\038\000\039\000\040\000\000\000\000\000\032\000\000\000\000\000\
\032\000\036\000\037\000\038\000\039\000\040\000\050\000\000\000\
\000\000\042\000\043\000\044\000\045\000\046\000\047\000\048\000\
\049\000\050\000\000\000\000\000\000\000\036\000\037\000\038\000\
\039\000\040\000\000\000\000\000\057\000\042\000\043\000\044\000\
\045\000\046\000\047\000\048\000\049\000\050\000\005\000\006\000\
\007\000\008\000\009\000\000\000\000\000\000\000\035\000\000\000\
\079\000\035\000\035\000\035\000\035\000\035\000\035\000\035\000\
\035\000\010\000\010\000\010\000\010\000\010\000\000\000\000\000\
\000\000\000\000\000\000\000\000\035\000\000\000\000\000\035\000\
\000\000\000\000\005\000\006\000\007\000\008\000\009\000\000\000\
\000\000\000\000\000\000\010\000\000\000\000\000\010\000\010\000\
\010\000\010\000\010\000\000\000\010\000\010\000\000\000\010\000\
\010\000\010\000\010\000\010\000\010\000\000\000\000\000\011\000\
\012\000\013\000\014\000\015\000\000\000\000\000\016\000\000\000\
\017\000\018\000\019\000\020\000\021\000\036\000\037\000\038\000\
\039\000\040\000\000\000\000\000\000\000\042\000\043\000\044\000\
\045\000\046\000\047\000\048\000\049\000\050\000\000\000\000\000\
\000\000\036\000\037\000\038\000\039\000\040\000\000\000\000\000\
\080\000\042\000\043\000\044\000\045\000\046\000\047\000\048\000\
\049\000\050\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\036\000\000\000\106\000\036\000\036\000\036\000\
\036\000\036\000\036\000\036\000\036\000\039\000\000\000\000\000\
\039\000\039\000\039\000\039\000\039\000\039\000\039\000\039\000\
\036\000\000\000\000\000\036\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\039\000\040\000\000\000\039\000\040\000\
\040\000\040\000\040\000\040\000\040\000\040\000\040\000\041\000\
\000\000\000\000\000\000\000\000\000\000\000\000\041\000\041\000\
\041\000\041\000\040\000\000\000\000\000\040\000\000\000\000\000\
\000\000\000\000\042\000\000\000\043\000\041\000\044\000\000\000\
\041\000\042\000\042\000\042\000\042\000\043\000\043\000\044\000\
\044\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\042\000\000\000\043\000\042\000\044\000\043\000\000\000\044\000\
\036\000\037\000\038\000\039\000\040\000\041\000\000\000\000\000\
\042\000\043\000\044\000\045\000\046\000\047\000\048\000\049\000\
\050\000\036\000\037\000\038\000\039\000\040\000\081\000\000\000\
\000\000\042\000\043\000\044\000\045\000\046\000\047\000\048\000\
\049\000\050\000\036\000\037\000\038\000\039\000\040\000\093\000\
\000\000\000\000\042\000\043\000\044\000\045\000\046\000\047\000\
\048\000\049\000\050\000\036\000\037\000\038\000\039\000\040\000\
\096\000\000\000\000\000\042\000\043\000\044\000\045\000\046\000\
\047\000\048\000\049\000\050\000\036\000\037\000\038\000\039\000\
\040\000\000\000\000\000\000\000\042\000\043\000\044\000\045\000\
\046\000\047\000\048\000\049\000\050\000\036\000\037\000\038\000\
\039\000\040\000\000\000\000\000\000\000\042\000\043\000\044\000\
\045\000\046\000\047\000\000\000\000\000\050\000\036\000\037\000\
\038\000\039\000\040\000\000\000\000\000\000\000\042\000\043\000\
\044\000\045\000\000\000\000\000\000\000\000\000\050\000"

let yycheck = "\016\000\
\000\000\013\000\035\001\034\001\001\000\038\001\014\000\015\000\
\039\001\040\001\041\001\042\001\043\001\034\001\034\001\034\001\
\007\001\000\000\026\000\027\000\028\000\001\001\002\001\003\001\
\004\001\005\001\034\000\035\000\036\000\037\000\038\000\039\000\
\040\000\041\001\042\000\043\000\044\000\045\000\046\000\047\000\
\048\000\049\000\050\000\034\001\010\001\011\001\012\001\027\001\
\041\001\013\001\030\001\031\001\032\001\033\001\034\001\034\001\
\036\001\037\001\024\001\039\001\040\001\041\001\042\001\043\001\
\001\001\002\001\003\001\004\001\005\001\077\000\082\000\035\001\
\007\001\081\000\038\001\013\001\084\000\035\001\013\001\035\001\
\038\001\001\001\002\001\003\001\004\001\005\001\103\000\099\000\
\096\000\038\001\027\001\037\001\037\001\030\001\031\001\032\001\
\033\001\034\001\041\001\036\001\037\001\035\001\039\001\040\001\
\041\001\042\001\043\001\027\001\038\001\036\001\030\001\031\001\
\032\001\033\001\034\001\036\001\028\001\037\001\037\001\039\001\
\040\001\041\001\042\001\043\001\008\001\009\001\010\001\011\001\
\012\001\013\001\041\001\037\001\016\001\017\001\018\001\019\001\
\020\001\021\001\022\001\023\001\024\001\086\000\087\000\037\001\
\036\001\036\001\013\001\008\001\009\001\013\001\035\001\035\001\
\013\001\035\001\038\001\016\001\017\001\018\001\019\001\020\001\
\021\001\022\001\023\001\035\001\109\000\110\000\035\001\255\255\
\255\255\255\255\008\001\009\001\255\255\255\255\035\001\013\001\
\255\255\038\001\016\001\017\001\018\001\019\001\020\001\021\001\
\022\001\023\001\255\255\255\255\255\255\255\255\008\001\009\001\
\010\001\011\001\012\001\255\255\255\255\035\001\255\255\255\255\
\038\001\008\001\009\001\010\001\011\001\012\001\024\001\255\255\
\255\255\016\001\017\001\018\001\019\001\020\001\021\001\022\001\
\023\001\024\001\255\255\255\255\255\255\008\001\009\001\010\001\
\011\001\012\001\255\255\255\255\035\001\016\001\017\001\018\001\
\019\001\020\001\021\001\022\001\023\001\024\001\001\001\002\001\
\003\001\004\001\005\001\255\255\255\255\255\255\013\001\255\255\
\035\001\016\001\017\001\018\001\019\001\020\001\021\001\022\001\
\023\001\001\001\002\001\003\001\004\001\005\001\255\255\255\255\
\255\255\255\255\255\255\255\255\035\001\255\255\255\255\038\001\
\255\255\255\255\001\001\002\001\003\001\004\001\005\001\255\255\
\255\255\255\255\255\255\027\001\255\255\255\255\030\001\031\001\
\032\001\033\001\034\001\255\255\036\001\037\001\255\255\039\001\
\040\001\041\001\042\001\043\001\027\001\255\255\255\255\030\001\
\031\001\032\001\033\001\034\001\255\255\255\255\037\001\255\255\
\039\001\040\001\041\001\042\001\043\001\008\001\009\001\010\001\
\011\001\012\001\255\255\255\255\255\255\016\001\017\001\018\001\
\019\001\020\001\021\001\022\001\023\001\024\001\255\255\255\255\
\255\255\008\001\009\001\010\001\011\001\012\001\255\255\255\255\
\035\001\016\001\017\001\018\001\019\001\020\001\021\001\022\001\
\023\001\024\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\013\001\255\255\035\001\016\001\017\001\018\001\
\019\001\020\001\021\001\022\001\023\001\013\001\255\255\255\255\
\016\001\017\001\018\001\019\001\020\001\021\001\022\001\023\001\
\035\001\255\255\255\255\038\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\035\001\013\001\255\255\038\001\016\001\
\017\001\018\001\019\001\020\001\021\001\022\001\023\001\013\001\
\255\255\255\255\255\255\255\255\255\255\255\255\020\001\021\001\
\022\001\023\001\035\001\255\255\255\255\038\001\255\255\255\255\
\255\255\255\255\013\001\255\255\013\001\035\001\013\001\255\255\
\038\001\020\001\021\001\022\001\023\001\022\001\023\001\022\001\
\023\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\035\001\255\255\035\001\038\001\035\001\038\001\255\255\038\001\
\008\001\009\001\010\001\011\001\012\001\013\001\255\255\255\255\
\016\001\017\001\018\001\019\001\020\001\021\001\022\001\023\001\
\024\001\008\001\009\001\010\001\011\001\012\001\013\001\255\255\
\255\255\016\001\017\001\018\001\019\001\020\001\021\001\022\001\
\023\001\024\001\008\001\009\001\010\001\011\001\012\001\013\001\
\255\255\255\255\016\001\017\001\018\001\019\001\020\001\021\001\
\022\001\023\001\024\001\008\001\009\001\010\001\011\001\012\001\
\013\001\255\255\255\255\016\001\017\001\018\001\019\001\020\001\
\021\001\022\001\023\001\024\001\008\001\009\001\010\001\011\001\
\012\001\255\255\255\255\255\255\016\001\017\001\018\001\019\001\
\020\001\021\001\022\001\023\001\024\001\008\001\009\001\010\001\
\011\001\012\001\255\255\255\255\255\255\016\001\017\001\018\001\
\019\001\020\001\021\001\255\255\255\255\024\001\008\001\009\001\
\010\001\011\001\012\001\255\255\255\255\255\255\016\001\017\001\
\018\001\019\001\255\255\255\255\255\255\255\255\024\001"

let yynames_const = "\
  INT\000\
  FLOAT\000\
  BOOL\000\
  STRING\000\
  VOID\000\
  ARRAY\000\
  ASSIGN\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIVIDE\000\
  EXP\000\
  SEMC\000\
  PP\000\
  MM\000\
  LT\000\
  GT\000\
  LTE\000\
  GTE\000\
  EQ\000\
  NE\000\
  AND\000\
  OR\000\
  MOD\000\
  NOT\000\
  IN\000\
  IF\000\
  ELSE\000\
  ELIF\000\
  WHILE\000\
  FOR\000\
  DEF\000\
  RETURN\000\
  LPAREN\000\
  RPAREN\000\
  RBRACE\000\
  LBRACE\000\
  COMMA\000\
  EOF\000\
  "

let yynames_block = "\
  ILITERAL\000\
  FLITERAL\000\
  ID\000\
  SLITERAL\000\
  BLITERAL\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 43 "parser.mly"
                ( _1 )
# 386 "parser.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    Obj.repr(
# 47 "parser.mly"
                   ( [] )
# 392 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 50 "parser.mly"
                   ( _2 :: _1 )
# 400 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 53 "parser.mly"
              ( Expr _1 )
# 407 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 7 : 'typ) in
    let _3 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : 'formals_opt) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 55 "parser.mly"
     ( FuncDef(
        { typ = _2;
          fname = _3;
          formals = List.rev _5;
          body = List.rev _8 }
        )
      )
# 423 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 62 "parser.mly"
                            ( VDeclareAssign(_1, _2, _4) )
# 432 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 63 "parser.mly"
                ( VDeclare(_1, _2) )
# 440 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr_opt) in
    Obj.repr(
# 64 "parser.mly"
                         ( Return _2 )
# 447 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 65 "parser.mly"
                                            ( Block(List.rev _2)    )
# 454 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'stmt) in
    Obj.repr(
# 66 "parser.mly"
                                                          ( If(_3, _6, Block([])))
# 462 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 8 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 5 : 'stmt) in
    let _10 = (Parsing.peek_val __caml_parser_env 1 : 'stmt) in
    Obj.repr(
# 67 "parser.mly"
                                                                     ( If(_3, _6, _10))
# 471 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 8 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 6 : 'expr) in
    let _7 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _10 = (Parsing.peek_val __caml_parser_env 1 : 'stmt) in
    Obj.repr(
# 68 "parser.mly"
                                                                  ( For(_3, _5, _7, _10) )
# 481 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'stmt) in
    Obj.repr(
# 69 "parser.mly"
                                                ( While(_3, _6) )
# 489 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 82 "parser.mly"
                  ( [] )
# 495 "parser.ml"
               : 'formals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'formal_list) in
    Obj.repr(
# 83 "parser.mly"
                ( _1 )
# 502 "parser.ml"
               : 'formals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 86 "parser.mly"
         ( [(_1,_2)] )
# 510 "parser.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'formal_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 87 "parser.mly"
                             ( (_3,_4) :: _1 )
# 519 "parser.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 92 "parser.mly"
                     ( Int )
# 525 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 93 "parser.mly"
                     ( Float )
# 531 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 94 "parser.mly"
                     ( Boolean )
# 537 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 95 "parser.mly"
                     ( String )
# 543 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 96 "parser.mly"
                     ( Void )
# 549 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 102 "parser.mly"
                  ( Noexpr )
# 555 "parser.ml"
               : 'expr_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 103 "parser.mly"
                  ( _1 )
# 562 "parser.ml"
               : 'expr_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 106 "parser.mly"
                       ( Liti(_1) )
# 569 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 107 "parser.mly"
                       ( Litf(_1) )
# 576 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 108 "parser.mly"
                       ( Litb(_1) )
# 583 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 109 "parser.mly"
                       ( Lits(_1) )
# 590 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 110 "parser.mly"
                       ( Id(_1) )
# 597 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 112 "parser.mly"
                       ( Assign(_1, _3) )
# 605 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 113 "parser.mly"
                       ( Binop(_1, Add, _3) )
# 613 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 114 "parser.mly"
                       ( Binop(_1, Sub, _3) )
# 621 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 115 "parser.mly"
                       ( Binop(_1, Mul, _3) )
# 629 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 116 "parser.mly"
                       ( Binop(_1, Div, _3) )
# 637 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 117 "parser.mly"
                       ( Binop(_1, Lt, _3) )
# 645 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 118 "parser.mly"
                       ( Binop(_1, Gt, _3) )
# 653 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 119 "parser.mly"
                       ( Binop(_1, Exp, _3) )
# 661 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 120 "parser.mly"
                       ( Binop(_1, Mod, _3) )
# 669 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 121 "parser.mly"
                       ( Binop(_1, Lte, _3) )
# 677 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 122 "parser.mly"
                       ( Binop(_1, Gte, _3) )
# 685 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 123 "parser.mly"
                       ( Binop(_1, Eq, _3) )
# 693 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 124 "parser.mly"
                       ( Binop(_1, Ne, _3) )
# 701 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 125 "parser.mly"
                       ( Binop(_1, And, _3) )
# 709 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 126 "parser.mly"
                       ( Binop(_1, Or, _3) )
# 717 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'args_opt) in
    Obj.repr(
# 127 "parser.mly"
                              ( Call(_1, _3)  )
# 725 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 128 "parser.mly"
                       ( _2 )
# 732 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 131 "parser.mly"
                  ( [] )
# 738 "parser.ml"
               : 'args_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'args_list) in
    Obj.repr(
# 132 "parser.mly"
               ( List.rev _1 )
# 745 "parser.ml"
               : 'args_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 135 "parser.mly"
                            ( [_1] )
# 752 "parser.ml"
               : 'args_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'args_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 136 "parser.mly"
                         ( _3 :: _1 )
# 760 "parser.ml"
               : 'args_list))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.program)
