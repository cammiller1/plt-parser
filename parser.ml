type token =
  | INT
  | FLOAT
  | BOOL
  | STRING
  | VOID
  | ARRAY
  | ASSIGN
  | PLUS
  | MINUS
  | TIMES
  | DIVIDE
  | EXP
  | SEMC
  | PP
  | MM
  | LT
  | GT
  | LTE
  | GTE
  | EQ
  | NE
  | AND
  | OR
  | MOD
  | NOT
  | IF
  | ELSE
  | ELIF
  | WHILE
  | FOR
  | DEF
  | RETURN
  | LPAREN
  | RPAREN
  | RBRACE
  | LBRACE
  | COMMA
  | ILITERAL of (int)
  | FLITERAL of (float)
  | ID of (string)
  | SLITERAL of (string)
  | BLITERAL of (bool)
  | EOF

open Parsing;;
let _ = parse_error;;
# 1 "parser.mly"
 open Ast 
# 51 "parser.ml"
let yytransl_const = [|
  257 (* INT *);
  258 (* FLOAT *);
  259 (* BOOL *);
  260 (* STRING *);
  261 (* VOID *);
  262 (* ARRAY *);
  263 (* ASSIGN *);
  264 (* PLUS *);
  265 (* MINUS *);
  266 (* TIMES *);
  267 (* DIVIDE *);
  268 (* EXP *);
  269 (* SEMC *);
  270 (* PP *);
  271 (* MM *);
  272 (* LT *);
  273 (* GT *);
  274 (* LTE *);
  275 (* GTE *);
  276 (* EQ *);
  277 (* NE *);
  278 (* AND *);
  279 (* OR *);
  280 (* MOD *);
  281 (* NOT *);
  282 (* IF *);
  283 (* ELSE *);
  284 (* ELIF *);
  285 (* WHILE *);
  286 (* FOR *);
  287 (* DEF *);
  288 (* RETURN *);
  289 (* LPAREN *);
  290 (* RPAREN *);
  291 (* RBRACE *);
  292 (* LBRACE *);
  293 (* COMMA *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  294 (* ILITERAL *);
  295 (* FLITERAL *);
  296 (* ID *);
  297 (* SLITERAL *);
  298 (* BLITERAL *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\006\000\006\000\008\000\
\008\000\005\000\005\000\005\000\005\000\005\000\005\000\007\000\
\007\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
\004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
\004\000\004\000\004\000\004\000\004\000\004\000\004\000\009\000\
\009\000\010\000\010\000\000\000"

let yylen = "\002\000\
\002\000\000\000\002\000\002\000\009\000\005\000\003\000\003\000\
\003\000\007\000\011\000\011\000\007\000\000\000\001\000\002\000\
\004\000\001\000\001\000\001\000\001\000\001\000\002\000\000\000\
\001\000\001\000\001\000\001\000\001\000\001\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\004\000\003\000\000\000\
\001\000\001\000\003\000\002\000"

let yydefred = "\000\000\
\002\000\000\000\052\000\000\000\018\000\019\000\020\000\021\000\
\022\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\
\026\000\027\000\000\000\029\000\028\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\023\000\000\000\000\000\000\000\000\000\000\000\008\000\
\047\000\009\000\003\000\000\000\000\000\000\000\000\000\000\000\
\000\000\033\000\034\000\037\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\038\000\000\000\007\000\000\000\
\000\000\000\000\000\000\046\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\006\000\000\000\000\000\
\000\000\016\000\000\000\000\000\000\000\013\000\000\000\002\000\
\000\000\000\000\000\000\000\000\017\000\000\000\000\000\005\000\
\000\000\000\000\011\000\012\000"

let yydgoto = "\002\000\
\003\000\004\000\059\000\023\000\024\000\091\000\030\000\092\000\
\062\000\063\000"

let yysindex = "\002\000\
\000\000\000\000\000\000\126\255\000\000\000\000\000\000\000\000\
\000\000\239\254\240\254\002\255\064\255\196\255\196\255\000\000\
\000\000\000\000\043\255\000\000\000\000\000\000\206\000\005\255\
\196\255\196\255\196\255\006\255\018\001\046\255\127\255\022\255\
\196\255\196\255\196\255\196\255\196\255\196\255\196\255\000\000\
\196\255\196\255\196\255\196\255\196\255\196\255\196\255\196\255\
\196\255\000\000\001\255\053\000\072\000\223\000\023\255\000\000\
\000\000\000\000\000\000\018\001\018\001\036\255\034\255\251\254\
\251\254\000\000\000\000\000\000\069\001\069\001\069\001\069\001\
\052\001\052\001\035\001\035\001\000\000\196\255\000\000\039\255\
\067\255\196\255\064\255\000\000\196\255\240\000\126\255\126\255\
\001\001\007\255\045\255\063\255\018\001\000\000\066\255\069\255\
\196\255\000\000\072\255\064\255\078\255\000\000\091\000\000\000\
\009\255\073\255\075\255\084\255\000\000\126\255\126\255\000\000\
\077\255\083\255\000\000\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\108\255\000\000\000\000\
\000\000\000\000\161\255\000\000\000\000\018\000\000\000\000\000\
\000\000\000\000\000\000\000\000\119\255\000\000\000\000\000\000\
\000\000\099\255\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\065\255\060\255\000\000\100\255\183\255\
\205\255\000\000\000\000\000\000\230\255\110\000\132\000\154\000\
\172\000\176\000\059\255\232\255\000\000\000\000\000\000\000\000\
\000\000\000\000\106\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\107\255\061\255\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\242\255\252\255\251\255\247\255\000\000\000\000\000\000\
\000\000\000\000"

let yytablesize = 605
let yytable = "\022\000\
\010\000\032\000\001\000\028\000\037\000\038\000\039\000\078\000\
\029\000\031\000\050\000\050\000\050\000\079\000\050\000\025\000\
\026\000\001\000\049\000\052\000\053\000\054\000\005\000\006\000\
\007\000\008\000\009\000\060\000\061\000\064\000\065\000\066\000\
\067\000\068\000\027\000\069\000\070\000\071\000\072\000\073\000\
\074\000\075\000\076\000\077\000\051\000\055\000\098\000\010\000\
\109\000\033\000\011\000\012\000\013\000\014\000\015\000\083\000\
\058\000\016\000\056\000\017\000\018\000\019\000\020\000\021\000\
\005\000\006\000\007\000\008\000\009\000\084\000\085\000\043\000\
\086\000\090\000\087\000\034\000\089\000\045\000\099\000\093\000\
\043\000\043\000\095\000\096\000\005\000\006\000\007\000\008\000\
\009\000\108\000\105\000\103\000\043\000\050\000\051\000\043\000\
\050\000\051\000\045\000\100\000\101\000\045\000\088\000\102\000\
\106\000\113\000\114\000\104\000\110\000\010\000\111\000\115\000\
\011\000\012\000\013\000\014\000\015\000\116\000\112\000\016\000\
\024\000\017\000\018\000\019\000\020\000\021\000\005\000\006\000\
\007\000\008\000\009\000\025\000\048\000\049\000\035\000\036\000\
\037\000\038\000\039\000\014\000\015\000\000\000\041\000\042\000\
\043\000\044\000\045\000\046\000\047\000\048\000\049\000\010\000\
\000\000\000\000\011\000\012\000\013\000\014\000\015\000\000\000\
\057\000\016\000\000\000\017\000\018\000\019\000\020\000\021\000\
\030\000\030\000\030\000\030\000\030\000\030\000\000\000\000\000\
\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
\030\000\000\000\000\000\000\000\000\000\000\000\031\000\031\000\
\000\000\000\000\030\000\031\000\000\000\030\000\031\000\031\000\
\031\000\031\000\031\000\031\000\031\000\031\000\000\000\000\000\
\000\000\000\000\000\000\000\000\032\000\032\000\000\000\000\000\
\031\000\032\000\000\000\031\000\032\000\032\000\032\000\032\000\
\032\000\032\000\032\000\032\000\015\000\000\000\000\000\000\000\
\000\000\017\000\018\000\019\000\020\000\021\000\032\000\000\000\
\000\000\032\000\035\000\000\000\044\000\035\000\035\000\035\000\
\035\000\035\000\035\000\035\000\035\000\044\000\044\000\000\000\
\000\000\010\000\010\000\010\000\010\000\010\000\000\000\035\000\
\000\000\044\000\035\000\000\000\044\000\000\000\000\000\000\000\
\000\000\000\000\003\000\003\000\003\000\003\000\003\000\000\000\
\000\000\000\000\010\000\000\000\000\000\010\000\010\000\010\000\
\010\000\010\000\000\000\010\000\010\000\000\000\010\000\010\000\
\010\000\010\000\010\000\003\000\000\000\000\000\003\000\003\000\
\003\000\003\000\003\000\000\000\000\000\003\000\000\000\003\000\
\003\000\003\000\003\000\003\000\035\000\036\000\037\000\038\000\
\039\000\000\000\000\000\000\000\041\000\042\000\043\000\044\000\
\045\000\046\000\047\000\048\000\049\000\000\000\000\000\035\000\
\036\000\037\000\038\000\039\000\000\000\000\000\080\000\041\000\
\042\000\043\000\044\000\045\000\046\000\047\000\048\000\049\000\
\000\000\000\000\035\000\036\000\037\000\038\000\039\000\000\000\
\000\000\081\000\041\000\042\000\043\000\044\000\045\000\046\000\
\047\000\048\000\049\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\036\000\000\000\107\000\036\000\036\000\036\000\
\036\000\036\000\036\000\036\000\036\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\036\000\
\039\000\000\000\036\000\039\000\039\000\039\000\039\000\039\000\
\039\000\039\000\039\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\039\000\040\000\000\000\
\039\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\
\040\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\041\000\000\000\000\000\040\000\042\000\000\000\040\000\041\000\
\041\000\041\000\041\000\042\000\042\000\042\000\042\000\000\000\
\000\000\000\000\000\000\000\000\000\000\041\000\000\000\000\000\
\041\000\042\000\000\000\000\000\042\000\035\000\036\000\037\000\
\038\000\039\000\040\000\000\000\000\000\041\000\042\000\043\000\
\044\000\045\000\046\000\047\000\048\000\049\000\035\000\036\000\
\037\000\038\000\039\000\082\000\000\000\000\000\041\000\042\000\
\043\000\044\000\045\000\046\000\047\000\048\000\049\000\035\000\
\036\000\037\000\038\000\039\000\094\000\000\000\000\000\041\000\
\042\000\043\000\044\000\045\000\046\000\047\000\048\000\049\000\
\035\000\036\000\037\000\038\000\039\000\097\000\000\000\000\000\
\041\000\042\000\043\000\044\000\045\000\046\000\047\000\048\000\
\049\000\035\000\036\000\037\000\038\000\039\000\000\000\000\000\
\000\000\041\000\042\000\043\000\044\000\045\000\046\000\047\000\
\048\000\049\000\035\000\036\000\037\000\038\000\039\000\000\000\
\000\000\000\000\041\000\042\000\043\000\044\000\045\000\046\000\
\000\000\000\000\049\000\035\000\036\000\037\000\038\000\039\000\
\000\000\000\000\000\000\041\000\042\000\043\000\044\000\000\000\
\000\000\000\000\000\000\049\000\035\000\036\000\037\000\038\000\
\039\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\049\000"

let yycheck = "\004\000\
\000\000\016\000\001\000\013\000\010\001\011\001\012\001\007\001\
\014\000\015\000\006\001\006\001\006\001\013\001\006\001\033\001\
\033\001\000\000\024\001\025\000\026\000\027\000\001\001\002\001\
\003\001\004\001\005\001\033\000\034\000\035\000\036\000\037\000\
\038\000\039\000\033\001\041\000\042\000\043\000\044\000\045\000\
\046\000\047\000\048\000\049\000\040\001\040\001\040\001\026\001\
\040\001\007\001\029\001\030\001\031\001\032\001\033\001\033\001\
\035\001\036\001\013\001\038\001\039\001\040\001\041\001\042\001\
\001\001\002\001\003\001\004\001\005\001\034\001\037\001\013\001\
\078\000\083\000\036\001\033\001\082\000\013\001\034\001\085\000\
\022\001\023\001\087\000\088\000\001\001\002\001\003\001\004\001\
\005\001\104\000\100\000\097\000\034\001\034\001\034\001\037\001\
\037\001\037\001\034\001\037\001\035\001\037\001\036\001\035\001\
\027\001\110\000\111\000\036\001\036\001\026\001\036\001\035\001\
\029\001\030\001\031\001\032\001\033\001\035\001\035\001\036\001\
\013\001\038\001\039\001\040\001\041\001\042\001\001\001\002\001\
\003\001\004\001\005\001\013\001\034\001\034\001\008\001\009\001\
\010\001\011\001\012\001\034\001\034\001\255\255\016\001\017\001\
\018\001\019\001\020\001\021\001\022\001\023\001\024\001\026\001\
\255\255\255\255\029\001\030\001\031\001\032\001\033\001\255\255\
\034\001\036\001\255\255\038\001\039\001\040\001\041\001\042\001\
\008\001\009\001\010\001\011\001\012\001\013\001\255\255\255\255\
\016\001\017\001\018\001\019\001\020\001\021\001\022\001\023\001\
\024\001\255\255\255\255\255\255\255\255\255\255\008\001\009\001\
\255\255\255\255\034\001\013\001\255\255\037\001\016\001\017\001\
\018\001\019\001\020\001\021\001\022\001\023\001\255\255\255\255\
\255\255\255\255\255\255\255\255\008\001\009\001\255\255\255\255\
\034\001\013\001\255\255\037\001\016\001\017\001\018\001\019\001\
\020\001\021\001\022\001\023\001\033\001\255\255\255\255\255\255\
\255\255\038\001\039\001\040\001\041\001\042\001\034\001\255\255\
\255\255\037\001\013\001\255\255\013\001\016\001\017\001\018\001\
\019\001\020\001\021\001\022\001\023\001\022\001\023\001\255\255\
\255\255\001\001\002\001\003\001\004\001\005\001\255\255\034\001\
\255\255\034\001\037\001\255\255\037\001\255\255\255\255\255\255\
\255\255\255\255\001\001\002\001\003\001\004\001\005\001\255\255\
\255\255\255\255\026\001\255\255\255\255\029\001\030\001\031\001\
\032\001\033\001\255\255\035\001\036\001\255\255\038\001\039\001\
\040\001\041\001\042\001\026\001\255\255\255\255\029\001\030\001\
\031\001\032\001\033\001\255\255\255\255\036\001\255\255\038\001\
\039\001\040\001\041\001\042\001\008\001\009\001\010\001\011\001\
\012\001\255\255\255\255\255\255\016\001\017\001\018\001\019\001\
\020\001\021\001\022\001\023\001\024\001\255\255\255\255\008\001\
\009\001\010\001\011\001\012\001\255\255\255\255\034\001\016\001\
\017\001\018\001\019\001\020\001\021\001\022\001\023\001\024\001\
\255\255\255\255\008\001\009\001\010\001\011\001\012\001\255\255\
\255\255\034\001\016\001\017\001\018\001\019\001\020\001\021\001\
\022\001\023\001\024\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\013\001\255\255\034\001\016\001\017\001\018\001\
\019\001\020\001\021\001\022\001\023\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\034\001\
\013\001\255\255\037\001\016\001\017\001\018\001\019\001\020\001\
\021\001\022\001\023\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\034\001\013\001\255\255\
\037\001\016\001\017\001\018\001\019\001\020\001\021\001\022\001\
\023\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\013\001\255\255\255\255\034\001\013\001\255\255\037\001\020\001\
\021\001\022\001\023\001\020\001\021\001\022\001\023\001\255\255\
\255\255\255\255\255\255\255\255\255\255\034\001\255\255\255\255\
\037\001\034\001\255\255\255\255\037\001\008\001\009\001\010\001\
\011\001\012\001\013\001\255\255\255\255\016\001\017\001\018\001\
\019\001\020\001\021\001\022\001\023\001\024\001\008\001\009\001\
\010\001\011\001\012\001\013\001\255\255\255\255\016\001\017\001\
\018\001\019\001\020\001\021\001\022\001\023\001\024\001\008\001\
\009\001\010\001\011\001\012\001\013\001\255\255\255\255\016\001\
\017\001\018\001\019\001\020\001\021\001\022\001\023\001\024\001\
\008\001\009\001\010\001\011\001\012\001\013\001\255\255\255\255\
\016\001\017\001\018\001\019\001\020\001\021\001\022\001\023\001\
\024\001\008\001\009\001\010\001\011\001\012\001\255\255\255\255\
\255\255\016\001\017\001\018\001\019\001\020\001\021\001\022\001\
\023\001\024\001\008\001\009\001\010\001\011\001\012\001\255\255\
\255\255\255\255\016\001\017\001\018\001\019\001\020\001\021\001\
\255\255\255\255\024\001\008\001\009\001\010\001\011\001\012\001\
\255\255\255\255\255\255\016\001\017\001\018\001\019\001\255\255\
\255\255\255\255\255\255\024\001\008\001\009\001\010\001\011\001\
\012\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\024\001"

let yynames_const = "\
  INT\000\
  FLOAT\000\
  BOOL\000\
  STRING\000\
  VOID\000\
  ARRAY\000\
  ASSIGN\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIVIDE\000\
  EXP\000\
  SEMC\000\
  PP\000\
  MM\000\
  LT\000\
  GT\000\
  LTE\000\
  GTE\000\
  EQ\000\
  NE\000\
  AND\000\
  OR\000\
  MOD\000\
  NOT\000\
  IF\000\
  ELSE\000\
  ELIF\000\
  WHILE\000\
  FOR\000\
  DEF\000\
  RETURN\000\
  LPAREN\000\
  RPAREN\000\
  RBRACE\000\
  LBRACE\000\
  COMMA\000\
  EOF\000\
  "

let yynames_block = "\
  ILITERAL\000\
  FLITERAL\000\
  ID\000\
  SLITERAL\000\
  BLITERAL\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 43 "parser.mly"
                 ( List.rev _1 )
# 392 "parser.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    Obj.repr(
# 51 "parser.mly"
                   ( [] )
# 398 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 52 "parser.mly"
                   ( _2 :: _1 )
# 406 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 55 "parser.mly"
              ( Expr _1 )
# 413 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 7 : 'typ) in
    let _3 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : 'formals_opt) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 57 "parser.mly"
     ( { typ = _2;
         fname = _3;
        formals = List.rev _5;
        locals = List.rev _8;
        body = List.rev _8 } 
     )
# 428 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 64 "parser.mly"
                            ( DeclareAssign(_1, _2, _4) )
# 437 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 67 "parser.mly"
                ( Declare(_1, _2) )
# 445 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr_opt) in
    Obj.repr(
# 68 "parser.mly"
                         ( Return _2 )
# 452 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 69 "parser.mly"
                                            ( Block(List.rev _2)    )
# 459 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'stmt) in
    Obj.repr(
# 70 "parser.mly"
                                                          ( If(_3, _6, Block([])))
# 467 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 8 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 5 : 'stmt) in
    let _10 = (Parsing.peek_val __caml_parser_env 1 : 'stmt) in
    Obj.repr(
# 71 "parser.mly"
                                                                     ( If(_3, _6, _10))
# 476 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 8 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 6 : 'expr) in
    let _7 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _10 = (Parsing.peek_val __caml_parser_env 1 : 'stmt) in
    Obj.repr(
# 72 "parser.mly"
                                                                  ( For(_3, _5, _7, _10) )
# 486 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'stmt) in
    Obj.repr(
# 73 "parser.mly"
                                                ( While(_3, _6) )
# 494 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 78 "parser.mly"
                  ( [] )
# 500 "parser.ml"
               : 'formals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'formal_list) in
    Obj.repr(
# 79 "parser.mly"
                ( _1 )
# 507 "parser.ml"
               : 'formals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 82 "parser.mly"
         ( [(_1,_2)] )
# 515 "parser.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'formal_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 83 "parser.mly"
                             ( (_3,_4) :: _1 )
# 524 "parser.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 89 "parser.mly"
                     ( Int )
# 530 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 90 "parser.mly"
                     ( Float )
# 536 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 91 "parser.mly"
                     ( Boolean )
# 542 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 92 "parser.mly"
                     ( String )
# 548 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 93 "parser.mly"
                     ( Void )
# 554 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    Obj.repr(
# 94 "parser.mly"
                     ( Array(_1) )
# 561 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 101 "parser.mly"
                  ( Noexpr )
# 567 "parser.ml"
               : 'expr_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 102 "parser.mly"
                  ( _1 )
# 574 "parser.ml"
               : 'expr_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 105 "parser.mly"
                       ( Liti(_1) )
# 581 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 106 "parser.mly"
                       ( Litf(_1) )
# 588 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 107 "parser.mly"
                       ( Litb(_1) )
# 595 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 108 "parser.mly"
                       ( Lits(_1) )
# 602 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 109 "parser.mly"
                       ( Id(_1) )
# 609 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 110 "parser.mly"
                       ( Binop(_1, Add, _3) )
# 617 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 111 "parser.mly"
                       ( Binop(_1, Sub, _3) )
# 625 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 112 "parser.mly"
                       ( Binop(_1, Mul, _3) )
# 633 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 113 "parser.mly"
                       ( Binop(_1, Div, _3) )
# 641 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 114 "parser.mly"
                       ( Binop(_1, Lt, _3) )
# 649 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 115 "parser.mly"
                       ( Binop(_1, Gt, _3) )
# 657 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 116 "parser.mly"
                       ( Binop(_1, Exp, _3) )
# 665 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 117 "parser.mly"
                       ( Binop(_1, Mod, _3) )
# 673 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 118 "parser.mly"
                       ( Binop(_1, Lte, _3) )
# 681 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 119 "parser.mly"
                       ( Binop(_1, Gte, _3) )
# 689 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 120 "parser.mly"
                       ( Binop(_1, Eq, _3) )
# 697 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 121 "parser.mly"
                       ( Binop(_1, Ne, _3) )
# 705 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 122 "parser.mly"
                       ( Binop(_1, And, _3) )
# 713 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 123 "parser.mly"
                       ( Binop(_1, Or, _3) )
# 721 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 126 "parser.mly"
                       ( Assign(_1, _3) )
# 729 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'args_opt) in
    Obj.repr(
# 129 "parser.mly"
                              ( Call(_1, _3)  )
# 737 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 132 "parser.mly"
                       ( _2 )
# 744 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 135 "parser.mly"
                  ( [] )
# 750 "parser.ml"
               : 'args_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'args_list) in
    Obj.repr(
# 136 "parser.mly"
               ( List.rev _1 )
# 757 "parser.ml"
               : 'args_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 139 "parser.mly"
                            ( [_1] )
# 764 "parser.ml"
               : 'args_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'args_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 140 "parser.mly"
                         ( _3 :: _1 )
# 772 "parser.ml"
               : 'args_list))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.program)
